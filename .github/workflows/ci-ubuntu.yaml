name: ci-ubuntu
on: 
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
    
jobs:
  build-x86_64-gcc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Dependencies
        run: sudo apt-get install libboost-all-dev

      - name: Configure [Debug]
        run: cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -B build/debug

      - name: Build [Debug]
        run: cmake --build build/debug

      - name: Configure [Release]
        run: cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -B build/release

      - name: Build [Release]
        run: cmake --build build/release

  sonar-x86_64-gcc:
    needs: build-x86_64-gcc
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.1.2450 # Find the latest version in the "Linux" link on this page:
                                        # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
          submodules: true
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      - name: Run build-wrapper
        run: |
          sudo apt-get install libboost-all-dev
          mkdir build
          cmake -S . -B build
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  build-x86_64-clang:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Dependencies
        run: sudo apt-get install libboost-all-dev

      - name: Configure [Debug]
        run: CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -B build/debug

      - name: Build [Debug]
        run: cmake --build build/debug

      - name: Configure [Release]
        run: CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -B build/release

      - name: Build [Release]
        run: cmake --build build/release

  tidy-x86_64-clang:
    runs-on: ubuntu-latest
    needs: build-x86_64-clang
    steps:
      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup
        run: |
          sudo apt-get install libboost-all-dev clang-tidy
          CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DXENOBUILD_ENABLE_LINTER=ON -DCMAKE_BUILD_TYPE=Debug -B build/debug

      - name: Lint (clang-tidy)
        run: cmake --build build/debug

  test-x86_64-clang:
    runs-on: ubuntu-latest
    needs: build-x86_64-clang
    steps:
      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup
        run: |
          sudo apt-get install libboost-all-dev clang-tidy
          CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DXENOBUILD_ENABLE_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -B build/debug

      - name: Test (clang-tidy)
        run: cmake --build build/debug --target test
